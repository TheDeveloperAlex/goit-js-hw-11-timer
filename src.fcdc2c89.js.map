{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","document","querySelector","time","Date","now","start","timeout","setInterval","render","stop","clearInterval","interval","days","Math","floor","hours","mins","secs","console","log","innerHTML","toString","padStart","style","backgroundColor"],"mappings":";AAwIA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,KAAA,GAAA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,gBAAA,EAAA,kCAAA,OAAA,EAAA,IAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,IAAA,KAAA,EAAA,OAAA,CAAA,IAAA,EAAA,SAAA,MAAA,IAAA,UAAA,4CAAA,EAAA,MAAA,GAAA,IAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QA9DA,MAAMA,EAUFC,aAAY,SAAEC,EAAF,WAAYC,IAAc,EAAA,IAAA,KAAA,CAAA,UAAA,EAAA,WAAA,IAAA,EAAA,IAAA,KAAA,CAAA,UAAA,EAAA,WAAA,IAAA,EAAA,IAAA,KAAA,CAAA,UAAA,EAAA,WAAA,IAAA,EAAA,IAAA,KAAA,CAAA,UAAA,EAAA,WAAA,IAAA,EAAA,IAAA,KAAA,CAAA,UAAA,EAAA,WAAA,IAH3B,EAAA,KAAA,WAAA,KAG2B,EAAA,KAAA,eAAA,GAAA,EAAA,KAAA,YAAA,GAClBD,EAAAA,KAAAA,EAAAA,GAEDE,EAAAA,KAAAA,EAAAA,SAASC,cAAc,wBACtBD,EAAAA,KAAAA,EAAAA,SAASC,cAAc,yBACxBD,EAAAA,KAAAA,EAAAA,SAASC,cAAc,wBACvBD,EAAAA,KAAAA,EAAAA,SAASC,cAAc,wBACjCC,KAAAA,KAAOH,EAAaI,KAAKC,MACzBC,KAAAA,QAITA,QACSC,KAAAA,QAAUC,YAAY,IAAM,KAAKC,SAAU,KAEpDC,OACIC,cAAc,KAAKJ,SAEvBE,SACSN,KAAAA,MAAQ,KAAKS,SACZC,MAAAA,EAAOC,KAAKC,MAAM,KAAKZ,KAAQ,OAC/Ba,EAAQF,KAAKC,MAAO,KAAKZ,KAAQ,MAAyB,MAC1Dc,EAAOH,KAAKC,MAAO,KAAKZ,KAAQ,KAAoB,KACpDe,EAAOJ,KAAKC,MAAO,KAAKZ,KAAQ,IAAc,KAEpDgB,QAAQC,IAAIP,EAAMG,EAAOC,EAAMC,GAQlBG,EAAAA,KAAAA,GAAAA,+BAAiCR,EAAKS,WAAWC,SAAS,EAAE,WAC3DF,EAAAA,KAAAA,GAAAA,+BAAiCL,EAAMM,WAAWC,SAAS,EAAE,WAC9DF,EAAAA,KAAAA,GAAAA,+BAAiCJ,EAAKK,WAAWC,SAAS,EAAE,WAC5DF,EAAAA,KAAAA,GAAAA,+BAAiCH,EAAKI,WAAWC,SAAS,EAAE,YAWjF,IAAI1B,EAAe,CACjBE,SAAU,WACVC,WAAY,IAAII,KAAK,sBAGvBH,SAASC,cAAc,QAAQsB,MAAMC,gBAAkB","file":"src.fcdc2c89.js","sourceRoot":"../src","sourcesContent":["// class CountdownTimer {\n//     #el;\n//     #intervalId;\n//     #timerSec = 10;\n//     #interval = 1000;\n//     constructor({ selector, targetDate }) {\n//         this.#el = document.querySelector(selector);\n//         this.#timerSec = targetDate - Date.now();\n//         this.start();\n//     }\n//     start() {\n//         this.#intervalId = setInterval(() => { this.render(this.#timerSec -= this.#interval)}, this.#interval);\n//     }\n\n// const { render } = require(\"sass\");\n\n//     stop() {\n//         clearinterval(this.#intervalId);\n//     }\n\n//     render(time) {\n//         if (time < 0) {\n//             time = 0;\n//             this.stop();\n//             return false;\n//         }\n//         const days = Math.floor(time / (1000 * 60 * 60 * 24));\n//         const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n//         const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n//         const secs = Math.floor((time % (1000 * 60)) / 1000);\n//         // console.log(days, hours, mins, secs);\n//         // const placeTimerId = date.selector;\n//         // const placeTimer = document.querySelector(`#${placeTimerId}`);\n//         // console.log(placeTimer);\n        \n        \n//         this.#el.innerHTML = `${days.toString().padStart(2,0)}:${hours.toString().padStart(2,0)}:${mins.toString().padStart(2,0)}:${secs.toString().padStart(2,0)}`;\n\n//     }\n// }\n\n// const date = new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Jul 31, 2021'),\n// });\n// //     const placeTimerId = date.selector;\n// //     const placeTimer = document.querySelector(`${placeTimerId}`);\n// // console.log(placeTimer);\n// //     console.log(date.selector);\n// // console.log(date);\n\n// /*\n//  * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n//  * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n//  */\n\n// /*\n//  * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n//  * остатка % и делим его на количество миллисекунд в одном часе\n//  * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n//  */\n\n// /*\n//  * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n//  * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n//  */\n\n// /*\n//  * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n//  * миллисекунд в одной секунде (1000)\n//  */\n\n\n// ==========================================================================================================\nclass CountdownTimer {\n    #placeId;\n    #elDays;\n    #elHours;\n    #elMins;\n    #elSecs;\n\n    interval = 1000;\n    timeout;\n    time;\n    constructor({ selector, targetDate }) {\n        this.#placeId = selector;\n        // this.#el = document.querySelector(this.#placeId);\n        this.#elDays = document.querySelector('[data-value=\"days\"]');\n        this.#elHours = document.querySelector('[data-value=\"hours\"]');\n        this.#elMins = document.querySelector('[data-value=\"mins\"]');\n        this.#elSecs = document.querySelector('[data-value=\"secs\"]');\n        this.time = targetDate - Date.now();\n        this.start();\n        // console.log(this.time)\n    }\n    \n    start() {\n        this.timeout = setInterval(() => this.render(), 1000)\n    }\n    stop() {\n        clearInterval(this.timeout);\n    }\n    render() {\n        this.time -= this.interval;\n        const days = Math.floor(this.time / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((this.time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const mins = Math.floor((this.time % (1000 * 60 * 60)) / (1000 * 60));\n        const secs = Math.floor((this.time % (1000 * 60)) / 1000);\n\n        console.log(days, hours, mins, secs);\n        // console.log();\n\n        // console.log();\n\n        // console.log();\n\n    \n        this.#elDays.innerHTML = `<div class=\"time\">${days.toString().padStart(2,0)}</div>`;\n        this.#elHours.innerHTML = `<div class=\"time\">${hours.toString().padStart(2,0)}</div>`;\n        this.#elMins.innerHTML = `<div class=\"time\">${mins.toString().padStart(2,0)}</div>`;\n        this.#elSecs.innerHTML = `<div class=\"time\">${secs.toString().padStart(2,0)}</div>`;\n\n    }\n}\n    // const daysBlockNode = document.querySelector('[data-value=\"days\"]');\n    // const hoursBlockNode = document.querySelector('[data-value=\"hours\"]');\n    // const minsBlockNode = document.querySelector('[data-value=\"mins\"]');\n    // const secsBlockNode = document.querySelector('[data-value=\"secs\"]');\n\n        \n\nnew CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('January 24, 2022'),\n});\n\ndocument.querySelector('body').style.backgroundColor = \"brown\";"]}